-- Добавляем путь к package.path для поиска модулей в gamedata\scripts
package.path = package.path .. ";gamedata\\scripts\\xml_translator\\?.lua"

-- Настройка: если true, имя файла логов будет статическим, иначе будет добавляться дата и время
local USE_STATIC_LOG_NAME = false

-- Настройка: включение/выключение логирования
local ENABLE_LOGGING = true

-- Настройка: уровни логирования
local LOG_LEVELS = {
	DEBUG = true,
	INFO = true,
	WARNING = true,
	ERROR = true,
}

-- Определяем путь к файлу логов
local log_file_path

if USE_STATIC_LOG_NAME then
	log_file_path = "gamedata\\scripts\\xml_translator\\logs\\log.txt"
	-- Очищаем файл при инициализации, если используется статическое имя
	local log_file = io.open(log_file_path, "w")
	if log_file then
		log_file:close()
	else
		printf(string.format("[ERROR] [xml_translator] Failed to clear log file: %s", log_file_path))
	end
else
	log_file_path = "gamedata\\scripts\\xml_translator\\logs\\log_" .. os.date("%Y-%m-%d_%H-%M-%S") .. ".log"
end

-- Функция для сохранения логов
local function log_message(level, message)
	-- Проверяем, включено ли логирование и поддерживается ли уровень логирования
	if not ENABLE_LOGGING or not LOG_LEVELS[level] then
		return
	end

	local log_entry = string.format("[%s] [%s] %s\n", os.date("%Y-%m-%d %H:%M:%S"), level, message)
	local log_file = io.open(log_file_path, "a")
	if log_file then
		log_file:write(log_entry)
		log_file:close()
	else
		printf(string.format("[ERROR] [xml_translator] Failed to open log file: %s", log_file_path))
	end
end

-- Функция для безопасной загрузки модуля
local function safe_require(module_name)
	log_message("DEBUG", string.format("Attempting to load module: %s", module_name))
	local status, result = pcall(require, module_name)
	if status then
		log_message("DEBUG", string.format("Successfully loaded module: %s", module_name))
		return result
	else
		log_message("WARNING", string.format("Failed to load module '%s'. Error: %s", module_name, result))
		return nil
	end
end

-- Функция для загрузки переводов из applying_translate
local function load_applying_translations(xml_file_name)
	local applying_translations = {}
	local applying_folder = "gamedata\\scripts\\xml_translator\\dynamic_translations"
	local base_name = xml_file_name:match("([^/\\]+)%.xml$")

	if not base_name then
		log_message("ERROR", string.format("Invalid XML file name: %s", xml_file_name))
		return applying_translations
	end

	local lua_file_name = applying_folder .. "\\" .. base_name .. ".lua"
	local file = io.open(lua_file_name, "r")

	if file then
		file:close()
		local translations = safe_require("dynamic_translations." .. base_name)
		if translations then
			applying_translations[base_name] = translations
			log_message("INFO", string.format("Successfully loaded translations from: %s", lua_file_name))
		else
			log_message("WARNING", string.format("Failed to load translations from: %s", lua_file_name))
		end
	else
		log_message("INFO", string.format("No applying translations found for: %s", lua_file_name))
	end

	return applying_translations
end

-- Функция для изменения текста в XML
local function change_xml_text(xml_obj, translations)
	if not translations then
		log_message("WARNING", "No translations provided for file.")
		return
	end

	log_message("DEBUG", "Applying translations to XML file")

	local found_count = 0
	local missing_count = 0

	for string_id, new_text in pairs(translations) do
		local query = string.format("string[id=%s] > text", string_id)
		log_message("DEBUG", string.format("Querying XML for ID: %s", string_id))

		local res = xml_obj:query(query)
		if res[1] then
			local el = res[1]
			xml_obj:setText(el, new_text)
			found_count = found_count + 1
			log_message("DEBUG", string.format("Translation applied for ID: %s", string_id))
		else
			log_message("WARNING", string.format("Element not found for ID: %s", string_id))
			missing_count = missing_count + 1
		end
	end

	log_message("INFO", string.format("Translations applied: %d found, %d missing", found_count, missing_count))
end

-- Функция для чтения и парсинга Lua-файла с переводами
local function load_translations_from_file(file_path)
    local translations = {}
    local file = io.open(file_path, "r")
    if file then
        local content = file:read("*a")
        file:close()

        -- Логируем содержимое файла для отладки
        log_message("DEBUG", string.format("Loading translations from file: %s", file_path))
        log_message("DEBUG", string.format("File content: %s", content))

        -- Удаляем BOM (если есть)
        if content:sub(1, 3) == "\239\187\191" then
            content = content:sub(4)
            log_message("DEBUG", "Removed BOM from file content")
        end
		

        log_message("DEBUG", string.format("Escaped content: %s", content))

        -- Загружаем содержимое как Lua-код
        local func, err = load("return " .. content, "translations", "t", {})
        if not func then
            -- Если не удалось загрузить как "return ...", попробуем загрузить как есть
            func, err = load(content, "translations", "t", {})
        end

        if func then
            local status, result = pcall(func)
            if status then
                if type(result) == "table" then
                    translations = result
                    log_message("INFO", string.format("Successfully loaded translations from: %s", file_path))
                else
                    log_message("WARNING", string.format("Expected a table, but got: %s", type(result)))
                end
            else
                log_message("ERROR", string.format("Failed to execute translations: %s", result))
                log_message("DEBUG", string.format("Error context: File: %s, Content: %s", file_path, content))
            end
        else
            log_message("ERROR", string.format("Failed to load translations: %s", err))
            log_message("DEBUG", string.format("Error context: File: %s, Content: %s", file_path, content))
        end
    else
        log_message("INFO", string.format("No translation file found: %s", file_path))
    end
    return translations
end

-- Функция для записи переводов в файл
local function write_translations_to_file(file_path, translations, base_name)
	local file = io.open(file_path, "w")
	if file then
		file:write("-- Translations for " .. base_name .. "\n")
		file:write("return {\n")
		for string_id, text in pairs(translations) do
			file:write(string.format('    ["%s"] = [=[%s]=],\n', string_id, text))
		end
		file:write("}\n")
		file:close()
		log_message("INFO", string.format("Successfully updated translations in: %s", file_path))
	else
		log_message("ERROR", string.format("Failed to open file for writing: %s", file_path))
	end
end

-- Функция для сбора string_id из XML
local function collect_string_ids_from_xml(xml_obj)
	local string_ids = {}
	local root = xml_obj:getRoot()
	if root then
		local function process_child(child)
			if xml_obj:isElement(child) and xml_obj:getElementName(child) == "string" then
				local attr_table = xml_obj:getElementAttr(child)
				local string_id = attr_table and attr_table.id
				if string_id then
					string_ids[string_id] = true
				end
			end
		end
		xml_obj:iterateChildren(root, process_child)
	else
		log_message("ERROR", "Root element not found in XML")
	end
	return string_ids
end

-- Функция для обновления переводов
local function update_translations(existing_translations, string_ids)
	local updated_translations = {}
	local removed_count = 0
	for string_id, text in pairs(existing_translations) do
		if not string_ids[string_id] then
			updated_translations[string_id] = text
		else
			removed_count = removed_count + 1
		end
	end
	log_message("INFO", string.format("Removed %d translations", removed_count))
	return updated_translations
end

-- Функция для создания файла с переводами, если он отсутствует в missing_translations_rus
local function ensure_translation_file(xml_file_path, xml_obj)
	log_message("DEBUG", string.format("Ensuring translation file for: %s", xml_file_path))

	-- Извлекаем имя файла без расширения
	local base_name = xml_file_path:match("([^/\\]+)%.xml$")
	if not base_name then
		log_message("ERROR", string.format("Invalid XML file path: %s", xml_file_path))
		return nil
	end

	-- Путь к файлу в missing_translations_rus
	local missing_translation_path =
		string.format("gamedata\\scripts\\xml_translator\\missing_translations_rus\\%s.lua", base_name)
	log_message("DEBUG", string.format("Checking for missing translation file at: %s", missing_translation_path))

	-- Загружаем существующие переводы
	local existing_translations = load_translations_from_file(missing_translation_path)

	-- Собираем новые переводы из XML
	local new_translations = {}
	local root = xml_obj:getRoot()
	if root then
		local function process_child(child)
			if xml_obj:isElement(child) and xml_obj:getElementName(child) == "string" then
				local attr_table = xml_obj:getElementAttr(child)
				local string_id = attr_table and attr_table.id
				if string_id then
					local text_elements = xml_obj:query("text", child)
					if text_elements and text_elements[1] then
						local text = xml_obj:getText(text_elements[1])
						if text then
							-- Экранируем специальные символы
							--text = escape_xml_special_chars(text)
							if not existing_translations[string_id] then
								new_translations[string_id] = text
								log_message("INFO", string.format("Adding new translation for ID: %s", string_id))
							else
								log_message("INFO", string.format("Skipping existing ID: %s", string_id))
							end
						end
					end
				end
			end
		end
		xml_obj:iterateChildren(root, process_child)
	else
		log_message("ERROR", "Root element not found in XML")
	end

	-- Если есть новые переводы, обновляем файл
	if next(new_translations) then
		for string_id, text in pairs(new_translations) do
			existing_translations[string_id] = text
		end
		write_translations_to_file(missing_translation_path, existing_translations, base_name)
	else
		log_message("INFO", "No new translations to add")
	end
end

-- Callback для обработки XML
function on_xml_read()
	RegisterScriptCallback("on_xml_read", function(xml_file_name, xml_obj)
		log_message("INFO", string.format("Callback triggered for file: %s", xml_file_name))
		if not xml_file_name:match("^text\\eng\\.+%.xml$") and not xml_file_name:match("^text\\rus\\.+%.xml$") then
			return
		end

		local base_name = xml_file_name:match("([^/\\]+)%.xml$")

		local applying_translations = load_applying_translations(xml_file_name)
		if xml_file_name:match("^text\\eng\\.+%.xml$") then
			log_message("DEBUG", string.format("Processing file (in text\\eng): %s", xml_file_name))
			ensure_translation_file(xml_file_name, xml_obj)
		end

		if xml_file_name:match("^text\\rus\\.+%.xml$") then
			log_message("DEBUG", string.format("Processing file (in text\\rus): %s", xml_file_name))

			if base_name then
				local missing_translation_path =
					string.format("gamedata\\scripts\\xml_translator\\missing_translations_rus\\%s.lua", base_name)

				local existing_translations = load_translations_from_file(missing_translation_path)
				local xml_string_ids = collect_string_ids_from_xml(xml_obj)
				local updated_translations = update_translations(existing_translations, xml_string_ids)
				write_translations_to_file(missing_translation_path, updated_translations, base_name)
			else
				log_message("ERROR", string.format("Invalid XML file name: %s", xml_file_name))
			end
		end

		if applying_translations and next(applying_translations) ~= nil then
			change_xml_text(xml_obj, applying_translations[base_name])
		end
	end)
end
